{% extends 'base.html.twig' %}

{% block title %}Recettes Aléatoires
{% endblock %}

{% block body %}
	<div class="flex justify-center mt-32">
		<h1 class="text-center text-4xl font-bold text-indigo-500 font-sans leading-9 tracking-tight">
			Recette Aléatoire
		</h1>
	</div>

	<div class="mx-auto max-w-2xl items-center gap-x-8 gap-y-16 px-4 sm:px-6 lg:max-w-7xl lg:grid-cols-2 lg:px-8 mt-20">
		<div>
			<h2 class="text-center text-3xl font-bold tracking-tight text-slate-300 sm:text-3xl">Spécifications</h2>
			<p class="mt-4 text-center text-slate-400">Une recette gourmande et généreuse ! on vous explique ce qu'il faut pour la réaliser...</p>

			<dl class="mt-16 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 sm:gap-y-16 lg:gap-x-8">
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Nom de la recette</dt>
					<dd class="mt-2 text-sm text-slate-400">{{ recipe['name'] }}</dd>
				</div>
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Temps de préparation</dt>
					<dd class="mt-2 text-sm text-slate-400">{{ recipe['preparationTime'] }}</dd>
				</div>
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Ingrédients</dt>
					<div class="grid grid-cols-2 gap-2">
						{% for ingredient in recipe['ingredients'] %}
							<dd class="mt-2 text-sm text-slate-400 flex items-center gap-1">
								<svg class="h-6 w-5 flex-none text-indigo-500" viewbox="0 0 20 20" fill="currentColor" aria-hidden="true">
									<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
								</svg>
								{{ ingredient }}</dd>
						{% endfor %}
					</div>
				</div>
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Temps de cuisson</dt>
					<dd class="mt-2 text-sm text-slate-400">{{ recipe['cookingTime'] }}</dd>
				</div>
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Nombre de personnes</dt>
					<dd class="mt-2 text-sm text-slate-400">{{ recipe['serves'] }}</dd>
				</div>
				<div class="border-t border-gray-200 pt-4">
					<dt class="font-medium text-slate-300">Feedback</dt>
					<dd class="mt-2 text-sm text-slate-400">
						<button id="openModalButton" class="flex justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">J'ai finis cette recette !</button>
					</dd>

					{# Feedback Modal #}
					<div id="modal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
						<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
							<div class="fixed inset-0 bg-gray-950 bg-opacity-80 transition-opacity ease-out duration-300" aria-hidden="true"></div>
							<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
							<div id="modalContent" class="inline-block align-bottom bg-gray-900 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full ease-out duration-300" style="opacity: 0; transform: translate-y-4">
								<button id="closeModalButton" type="button" class="absolute right-4 top-4 text-gray-400 hover:text-gray-500">
									<span class="sr-only">Close</span>
									<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
										<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
									</svg>
								</button>

								{{ form_start(form) }}
								<div class="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
									<h3 class="text-lg leading-6 font-medium text-slate-300" id="modal-title">
										Laissez un commentaire et une note
									</h3>
									<div class="mt-5">
										{{ form_widget(form.comment, {'attr': {'class': 'w-full h-20 p-2 mt-2 border border-slate-400 rounded-md bg-gray-800 text-slate-300', 'placeholder': 'Votre commentaire...'}}) }}
        								{{ form_widget(form.note, {'attr': {'class': 'w-full mt-2 p-2 border border-slate-400 rounded-md bg-gray-800 text-slate-300', 'placeholder': 'Votre note (1-5)'}}) }}
									</div>
								</div>
								<div class="px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
									<button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
										Envoyer
									</button>
								</div>
								{{ form_end(form) }}
							</div>
						</div>
					</div>

					<script>
						// JavaScript to open and close the feedback modal

						document.addEventListener('DOMContentLoaded', function() {
							const openModalButton = document.getElementById('openModalButton');
							const closeModalButton = document.getElementById('closeModalButton');
							const modal = document.getElementById('modal');
							const modalContent = document.getElementById('modalContent');

							function openModal() {
								modal.classList.remove('hidden'); // Prépare l'élément à être affiché
								requestAnimationFrame(() => {
									modalContent.style.opacity = '1'; // Applique la transition d'opacité
									modalContent.style.transform = 'translateY(0)'; // Applique la transition de transformation
								});
							}

							function closeModal() {
								modalContent.style.opacity = '0'; // Démarre la transition d'opacité pour le contenu
								// L'écouteur d'événements pour la transition est défini une seule fois à l'extérieur des fonctions
							}

							// Définit l'écouteur d'événements pour la transition une seule fois
							modalContent.addEventListener('transitionend', function() {
								if (modalContent.style.opacity === '0') { // Vérifie si la modal est en train de se fermer
									modal.classList.add('hidden');
								}
							});

							openModalButton.addEventListener('click', openModal);
							closeModalButton.addEventListener('click', closeModal);
						});
					</script>

				</div>
			</dl>
		</div>
	</div>

{% endblock %}
